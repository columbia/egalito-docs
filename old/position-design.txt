Position designs.

0). No caching. SubsequentPosition is very slow.

1). get() function returns cached value; after moving a Chunk, need to
    call recalculate() on all Chunks in the same Function. Cannot have
    position dependencies other than "depends on previous child".

2). Each position stores a generation, and any get() call checks this
    generation against that of its dependencies. Can have arbitrary
    acyclic dependencies. Takes more space to store generations.
    Problem: checking dependencies walks the chunk tree backwards.

3). Normal positions store an offset relative to their parent. When a
    Chunk is moved, the subsequent positions in the current Chunk and
    the subsequent siblings of parents need to be adjusted, but not the
    children within other blocks.

4). Store a generation in each position and a "dependency" reference
    (to an authoritative node like AbsolutePosition). This basically does
    path compression of the dependencies. The get() function compares its
    generation against the authoritative generation, and if it has
    changed, follows the slow path to recompute parent positions.
