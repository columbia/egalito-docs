Note on optimization of inter-function register allocation:

There are three types of registers for almost every architecture:
 - caller-saved register (= argument registers)
 - callee-saved register
 - temporary register (!caller-saved && !callee-saved)

1) What are the registers that can be unnecessary pushed&poped?
 - [Leaf functions] the compiler knows that it is a leaf function, so it is
   likely that non callee-saved register saves are necessary.
   -> find callee-saved registers that no upstream functions uses
 - [root funtions] the compiler could know that is a root function, but it
   might not always optimize the use
   -> find callee-saved registers that no upstream functions uses

The reason why the compiler saves a register is because it ran out of spare
reigsters. In other words, those saved callee-saved registers are probably used
to hold temprary values possibly across function calls. And in such case, it
is very likely that caller-saved registers are all used. That leaves us only
temporary registers to use! Since they are temporary registers, they could be
used in any functions. They should not be alive across function calls, unless
probably callee is a leaf function defined in the same file.

2) What can we do?
Since callee-saved registers that are pushed are used, we need a replacement
that can hold the value.
 - replace the saved callee-saved register with a temporary register that are
   not used by any of its callees, including all indirect callees.
 - delete the push & pop.
Note that this temporary register used as above will no longer be available to
any functions in the same call graph.

3) How do I find a spare temporary register?
 - determine all registers used within each function in a call graph.
 - determine all registers used by all functions in the call graph. If one of
   the functions makes an indirect call, all functions that are called
   indirectly must be included in the call graph.

4) Which function should I optimize?
 - In general, this must be based on a profile.
 - Some heuristics:
   - a function which are called from a loop (if you can detect that)
   - a function which are called from many functions
   - a function that are close to the leaf node of the call graph, because
	 other nodes that are neither the caller nor the callee of that node can
	 still use that register to elimiate a push&pop
   - a function in a subset of a graph which does not include an indirect call

5) Further optimization?
The key seems to be narrowing the set of functions that could be called from
each indirect call site.

